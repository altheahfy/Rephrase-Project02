#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Êó¢Â≠ò„ÅÆStep18Áµ±‰∏Ä„Ç∑„Çπ„ÉÜ„É†„Çí5ÊñáÂûã„Éï„É´„Çª„ÉÉ„ÉàÂÖ®‰æãÊñáÂá¶ÁêÜÁî®„Å´‰øÆÊ≠£

import pandas as pd
import sys
import os

# Step18„Ç∑„Çπ„ÉÜ„É†„Çí„Ç§„É≥„Éù„Éº„Éà„Åô„Çã„Åü„ÇÅ„ÄÅÂêå„Åò„Éá„Ç£„É¨„ÇØ„Éà„É™„Åã„Çâ„Ç§„É≥„Éù„Éº„Éà
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# ‰∏ÄÊôÇÁöÑ„Å´Step18„Ç∑„Çπ„ÉÜ„É†„ÅÆ„ÇØ„É©„Çπ„Çí„Ç≥„Éî„Éº„Åó„Å¶‰øÆÊ≠£Áâà„Çí‰ΩúÊàê
exec(open('step18_unified_rephrase_system.py').read().replace(
    'if __name__ == "__main__":', 
    'if False:  # „É°„Ç§„É≥ÂÆüË°å„ÇíÁÑ°ÂäπÂåñ'
))

class Step18FullsetProcessor:
    """5ÊñáÂûã„Éï„É´„Çª„ÉÉ„ÉàÂÖ®‰æãÊñá„ÇíStep18ÂÆåÂÖ®Áâà„ÅßÂá¶ÁêÜ"""
    
    def __init__(self):
        print("üéØ Step18ÂÆåÂÖ®Áâà - 5ÊñáÂûã„Éï„É´„Çª„ÉÉ„ÉàÂá¶ÁêÜ„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ...")
        self.system = Step18UnifiedRephraseSystem()
        print("‚úÖ Step18Áµ±‰∏Ä„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü")

    def load_fullset_sentences(self):
        """5ÊñáÂûã„Éï„É´„Çª„ÉÉ„Éà„Åã„ÇâÂÖ®‰æãÊñá„ÇíË™≠„ÅøËæº„Åø"""
        try:
            df = pd.read_excel('ÔºàÂ∞èÊñáÂ≠óÂåñ„Åó„ÅüÊúÄÂàù„ÅÆ5ÊñáÂûã„Éï„É´„Çª„ÉÉ„ÉàÔºâ‰æãÊñáÂÖ•ÂäõÂÖÉ.xlsx')
            
            # ‰æãÊñáIDÂà•„Å´ÂéüÊñá„ÇíÂèñÂæó
            sentences = {}
            for _, row in df.iterrows():
                if pd.notna(row['‰æãÊñáID']) and pd.notna(row['ÂéüÊñá']):
                    if row['‰æãÊñáID'] not in sentences:
                        sentences[row['‰æãÊñáID']] = row['ÂéüÊñá']
            
            print(f"üìÇ 5ÊñáÂûã„Éï„É´„Çª„ÉÉ„Éà„Åã„Çâ{len(sentences)}ÂÄã„ÅÆ‰æãÊñá„ÇíË™≠„ÅøËæº„Åø")
            return df, sentences
            
        except Exception as e:
            print(f"‚ùå „Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº: {e}")
            return None, None

    def process_all_sentences(self):
        """ÂÖ®‰æãÊñá„ÇíStep18ÂÆåÂÖ®Áâà„ÅßÂá¶ÁêÜ"""
        print("\nüéØ 5ÊñáÂûã„Éï„É´„Çª„ÉÉ„ÉàÂÖ®‰æãÊñáÂá¶ÁêÜÈñãÂßã")
        print("=" * 80)
        
        # „Éá„Éº„ÇøË™≠„ÅøËæº„Åø
        correct_df, sentences = self.load_fullset_sentences()
        if not sentences:
            return
        
        all_results = []
        
        # ÂêÑ‰æãÊñá„ÇíÂá¶ÁêÜ
        for i, (ex_id, sentence) in enumerate(sentences.items(), 1):
            print(f"\nüìã [{i}/{len(sentences)}] Âá¶ÁêÜ‰∏≠: {ex_id}")
            print(f"ÂéüÊñá: {sentence}")
            print("-" * 60)
            
            try:
                # Step18ÂÆåÂÖ®Áâà„ÅßÂá¶ÁêÜ
                results = self.system.process_sentence(sentence)
                
                # ÁµêÊûú„Çí‰∏ÄË¶ßË°®Á§∫
                print("üîç Step18Âá¶ÁêÜÁµêÊûú:")
                for slot_name, slot_data in results.items():
                    if slot_data:  # „Éá„Éº„Çø„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅÆ„ÅøË°®Á§∫
                        print(f"  {slot_name}„Çπ„É≠„ÉÉ„Éà:")
                        if isinstance(slot_data, dict):
                            for key, value in slot_data.items():
                                if value:
                                    print(f"    {key:10}: \"{value}\"")
                
                # ÁµêÊûú„ÇíËìÑÁ©ç
                for slot_name, slot_data in results.items():
                    if isinstance(slot_data, dict):
                        for subslot_id, element in slot_data.items():
                            if element:
                                all_results.append({
                                    '‰æãÊñáID': ex_id,
                                    'Slot': slot_name,
                                    'SubslotID': subslot_id,
                                    'SubslotElement': element,
                                    'ÂéüÊñá': sentence
                                })
                    else:
                        # Âçò‰∏ÄË¶ÅÁ¥†„Çπ„É≠„ÉÉ„Éà(V, Aux)„ÅÆÂ†¥Âêà
                        all_results.append({
                            '‰æãÊñáID': ex_id,
                            'Slot': slot_name,
                            'SubslotID': '',
                            'SubslotElement': str(slot_data),
                            'ÂéüÊñá': sentence
                        })
                        
            except Exception as e:
                print(f"‚ùå {ex_id} Âá¶ÁêÜ„Ç®„É©„Éº: {e}")
                continue
        
        # ÁµêÊûú„ÇíDataFrame„Å´Â§âÊèõ
        result_df = pd.DataFrame(all_results)
        
        print(f"\n‚úÖ ÂÖ®Âá¶ÁêÜÂÆå‰∫Ü: {len(all_results)}Ë°å„ÅÆÁµêÊûúÁîüÊàê")
        
        # Ê≠£Ëß£„Éá„Éº„Çø„Å®ÊØîËºÉ
        self.compare_with_correct_data(result_df, correct_df)
        
        return result_df

    def compare_with_correct_data(self, result_df, correct_df):
        """Ê≠£Ëß£„Éá„Éº„Çø„Å®„ÅÆË©≥Á¥∞ÊØîËºÉ"""
        print("\n" + "=" * 80)
        print("üîç Ê≠£Ëß£„Éá„Éº„Çø„Å®„ÅÆË©≥Á¥∞ÊØîËºÉ")
        print("=" * 80)
        
        # „Çµ„Éñ„Çπ„É≠„ÉÉ„ÉàÂàÜËß£„Åå„ÅÇ„ÇãÊ≠£Ëß£„Éá„Éº„Çø„ÅÆ„ÅøÊäΩÂá∫
        correct_subslots = correct_df[correct_df['SubslotID'].notna()]
        
        print(f"üìä ÊØîËºÉÁµ±Ë®à:")
        print(f"  Ê≠£Ëß£„Çµ„Éñ„Çπ„É≠„ÉÉ„ÉàË°åÊï∞: {len(correct_subslots)}")
        print(f"  Step18ÁµêÊûúË°åÊï∞: {len(result_df)}")
        print(f"  Ê≠£Ëß£‰æãÊñáÊï∞: {len(correct_subslots['‰æãÊñáID'].unique())}")
        print(f"  Step18Âá¶ÁêÜ‰æãÊñáÊï∞: {len(result_df['‰æãÊñáID'].unique())}")
        
        # ‰æãÊñáÂà•Ë©≥Á¥∞ÊØîËºÉÔºàÊúÄÂàù„ÅÆ3‰æãÊñáÔºâ
        for ex_id in correct_subslots['‰æãÊñáID'].unique()[:3]:
            print(f"\n" + "=" * 60)
            print(f"üìã {ex_id} Ë©≥Á¥∞ÊØîËºÉ:")
            print("=" * 60)
            
            # Ë©≤ÂΩì„Éá„Éº„ÇøÊäΩÂá∫
            correct_ex = correct_subslots[correct_subslots['‰æãÊñáID'] == ex_id]
            result_ex = result_df[result_df['‰æãÊñáID'] == ex_id]
            
            # ÂéüÊñáË°®Á§∫
            if len(correct_ex) > 0:
                original = correct_ex['ÂéüÊñá'].iloc[0] if 'ÂéüÊñá' in correct_ex.columns else "ÂéüÊñá‰∏çÊòé"
                print(f"ÂéüÊñá: {original}")
                print()
            
            # „Çπ„É≠„ÉÉ„ÉàÂà•ÊØîËºÉ
            all_slots = set(correct_ex['Slot'].unique()) | set(result_ex['Slot'].unique())
            
            for slot in sorted(all_slots):
                correct_slot = correct_ex[correct_ex['Slot'] == slot]
                result_slot = result_ex[result_ex['Slot'] == slot]
                
                if len(correct_slot) > 0 or len(result_slot) > 0:
                    print(f"„Äê{slot}„Çπ„É≠„ÉÉ„Éà„Äë")
                    
                    # Ê≠£Ëß£„Éá„Éº„Çø
                    print("  Ê≠£Ëß£:")
                    if len(correct_slot) > 0:
                        for _, row in correct_slot.iterrows():
                            print(f"    {row['SubslotID']:10}: \"{row['SubslotElement']}\"")
                    else:
                        print("    („Éá„Éº„Çø„Å™„Åó)")
                    
                    # Step18ÁµêÊûú
                    print("  Step18:")
                    if len(result_slot) > 0:
                        for _, row in result_slot.iterrows():
                            print(f"    {row['SubslotID']:10}: \"{row['SubslotElement']}\"")
                    else:
                        print("    („Éá„Éº„Çø„Å™„Åó)")
                    
                    print()

if __name__ == "__main__":
    processor = Step18FullsetProcessor()
    results = processor.process_all_sentences()
